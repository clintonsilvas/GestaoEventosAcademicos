// <auto-generated />
using System;
using GestaoEventosAcademicos.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestaoEventosAcademicos.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GestaoEventosAcademicos.Models.Administrador", b =>
                {
                    b.Property<int>("AdministradorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdministradorID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdministradorID");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("GestaoEventosAcademicos.Models.Certificado", b =>
                {
                    b.Property<int>("CertificadoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificadoID"));

                    b.Property<int>("AdministradorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventoID")
                        .HasColumnType("int");

                    b.Property<int>("ParticipanteID")
                        .HasColumnType("int");

                    b.HasKey("CertificadoID");

                    b.HasIndex("AdministradorID");

                    b.HasIndex("EventoID");

                    b.HasIndex("ParticipanteID");

                    b.ToTable("Certificados");
                });

            modelBuilder.Entity("GestaoEventosAcademicos.Models.Curso", b =>
                {
                    b.Property<int>("CursoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CursoID"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CursoID");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("GestaoEventosAcademicos.Models.Evento", b =>
                {
                    b.Property<int>("EventoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventoID"));

                    b.Property<int>("AdministradorID")
                        .HasColumnType("int");

                    b.Property<int>("Capacidade")
                        .HasColumnType("int");

                    b.Property<string>("CodigoParticipacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duração")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventoID");

                    b.HasIndex("AdministradorID");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("GestaoEventosAcademicos.Models.Participante", b =>
                {
                    b.Property<int>("ParticipanteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParticipanteID"));

                    b.Property<bool>("Certificado")
                        .HasColumnType("bit");

                    b.Property<int>("CursoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventoID")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParticipanteID");

                    b.HasIndex("CursoID");

                    b.HasIndex("EventoID");

                    b.ToTable("Participantes");
                });

            modelBuilder.Entity("GestaoEventosAcademicos.Models.Certificado", b =>
                {
                    b.HasOne("GestaoEventosAcademicos.Models.Administrador", "Administrador")
                        .WithMany("Certificados")
                        .HasForeignKey("AdministradorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestaoEventosAcademicos.Models.Evento", "Evento")
                        .WithMany("Certificados")
                        .HasForeignKey("EventoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestaoEventosAcademicos.Models.Participante", "Participante")
                        .WithMany()
                        .HasForeignKey("ParticipanteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrador");

                    b.Navigation("Evento");

                    b.Navigation("Participante");
                });

            modelBuilder.Entity("GestaoEventosAcademicos.Models.Evento", b =>
                {
                    b.HasOne("GestaoEventosAcademicos.Models.Administrador", "Administrador")
                        .WithMany("EventosAdministrados")
                        .HasForeignKey("AdministradorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrador");
                });

            modelBuilder.Entity("GestaoEventosAcademicos.Models.Participante", b =>
                {
                    b.HasOne("GestaoEventosAcademicos.Models.Curso", "Curso")
                        .WithMany("Participantes")
                        .HasForeignKey("CursoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestaoEventosAcademicos.Models.Evento", "Evento")
                        .WithMany("Participantes")
                        .HasForeignKey("EventoID");

                    b.Navigation("Curso");

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("GestaoEventosAcademicos.Models.Administrador", b =>
                {
                    b.Navigation("Certificados");

                    b.Navigation("EventosAdministrados");
                });

            modelBuilder.Entity("GestaoEventosAcademicos.Models.Curso", b =>
                {
                    b.Navigation("Participantes");
                });

            modelBuilder.Entity("GestaoEventosAcademicos.Models.Evento", b =>
                {
                    b.Navigation("Certificados");

                    b.Navigation("Participantes");
                });
#pragma warning restore 612, 618
        }
    }
}
